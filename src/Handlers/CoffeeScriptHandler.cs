using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Web;
using DotSmart.Properties;
using System.IO;
using System.Reflection;
using System.Diagnostics;

namespace DotSmart
{
    public class CoffeeScriptHandler : ScriptHandlerBase, IHttpHandler
    {
        static string _coffee;

        static CoffeeScriptHandler()
        {
            _coffee = Path.Combine(TempDirectory, @"node_modules\coffee-script\bin\coffee");
        }

        public void ProcessRequest(HttpContext context)
        {
            context.Response.ContentType = "application/x-javascript";

            context.Response.Write("// Generated by DotSmart LessCoffee on " + DateTime.Now + " - http://dotsmart.net\r\n");
            context.Response.Write("// Using CoffeeScript Compiler - http://coffeescript.org - Copyright 2012, Jeremy Ashkenas\r\n\r\n");

            string scriptFileName = context.Server.MapPath(context.Request.FilePath);

            renderScript(scriptFileName, context.Response.Output);
            SetCacheability(context.Response, scriptFileName);
        }

        void renderScript(string scriptFileName, TextWriter output)
        {
            using (var scriptFile = new StreamReader(scriptFileName))
            using (var stdErr = new StringWriter())
            {
                Debug.WriteLine("Compiling " + scriptFileName);
                int exitCode = ProcessUtil.Exec(NodeExe, 
                    "\"" + _coffee + "\" --compile --stdio", 
                    scriptFile, output, stdErr);
                if (exitCode != 0)
                {
                    output.WriteLine("throw \"Error in " + Path.GetFileName(scriptFileName).JsEncode() + ": " 
                        + stdErr.ToString().Trim().JsEncode() + "\";");
                }
            }
        }

        public bool IsReusable
        {
            get { return false; }
        }

    }
}
